# Google API key embedded below seems to be some sort of Google demo/tutorial key.
# For production deployment we override it with our own key.
google.api.script.url = "https://maps.googleapis.com/maps/api/js?key=AIzaSyCkUOdZ5y7hMm0yrcCQoCvLwzdM6M8s5qk&callback=initMap"

# https://www.playframework.com/documentation/latest/SecurityHeaders
# Connect to localhost:9000 for content security policy on websockets
play.filters.headers {
  contentSecurityPolicy = "connect-src 'self' ws://localhost:9000 ws://*.amazonaws.com:9000 https://ipapi.co"
}

# https://www.playframework.com/documentation/latest/AllowedHostsFilter
# Allow requests to localhost:9000 and to my server on AWS
play.filters.hosts {
  allowed = ["localhost:9000", ".amazonaws.com:9000"]
}

# override Akka defaults for both Play and Akka systems to always return to the thread pool
# after processing just one message, since that message may end up being to solve a hard problem
akka.actor.default-dispatcher.throughput = 1
play.akka.actor.default-dispatcher.throughput = 1

# context for Project Euler problem solvers.
# use fork-join in case one actor gets several long problems while other actors are free.
# use low throughput constant to give each actor a chance at execution.
euler-blocking-context {
  fork-join-executor {
    parallelism-factor = 1.0
  }
  throughput = 1
}

# context for IP-to-geo resolvers.
ip2geo-blocking-context {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = 2
  }
}

play.modules {
  enabled += modules.EulerProblemMasterInjectorModule
  enabled += modules.ClientBroadcasterInjectorModule
  enabled += modules.UserInfoMasterInjectorModule
}

# Frequency of system status updates
project_euler.status_update_freq_sec = 1

project_euler.problem_max_wait_seconds = 60

# Max number of PE problem-solving actors to be started by logical CPU core
project_euler.workers_per_cpu = 2

# How to long allow a solution to take before kicking off a new instance of solution to the same problem
project_euler.problem_max_age_seconds = 1200

# Whether or not cache solutions
project_euler.cache_solutions = 0

# IP spoofer to simulate multiple geo-distributed clients
project_euler.mock_ip = 1

# Which problems are to be solved on AWS Lambda in production
project_euler.aws_lambda = []